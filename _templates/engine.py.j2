import logging
import htmlmin
import json
import click
import pandas as pd
from pandas.io.json import json_normalize #package for flattening json in pandas df
from packaging import version
from jinja2 import Environment, FileSystemLoader
from pygments import highlight, lexers, formatters
from collections import defaultdict


log = logging.getLogger(__name__)


def engine(elm, **kwargs):
    """This is common engine for all commands."""

    # ben magic, throw away False and Empty flags
    flags = {k: v for k, v in kwargs.items() if v}
    logging.info('passed flags: %s', flags)

    for select in [
        {% for property in properties -%}
            '{{ property }}',
        {% endfor -%}
            ]:
        try:
            flags[select]
            logging.info(flags[select])

            if 'extend' in flags[select]:
                flags[select] = 'extend'
            if 'count' in flags[select]:
                flags[select] = 'count'
        except:
            pass


    #filters and search need to be dicts
    #https://docs.python.org/3/library/collections.html#collections.defaultdict.default_factory
    if 'filter' in flags and flags['filter']:
        filter_dict = defaultdict(list)
        for k, v in flags['filter']:
            filter_dict[k].append(v)
        flags['filter'] = dict(filter_dict.items())
        logging.info(flags['filter'])

    if 'search' in flags and flags['search']:
        search_dict = defaultdict(list)
        for k, v in flags['search']:
            search_dict[k].append(v)
        flags['search'] = dict(search_dict.items())
        logging.info(flags['search'])

    try:
        obj = getattr(elm.zapi, elm.command).get(**flags)
    except:
        click.secho('An error occured', fg='red', err=True)
        click.secho(elm.zapi, fg='red', err=True)
        click.secho(elm.command, fg='red', err=True)
        click.secho(flags, fg='red', err=True)

    if elm.export_filename:
        export(elm.export_filename, elm.config_file, elm.command, flags) 

    # print countoutput otherwise send obj to output with format
    if 'countOutput' in flags and flags['countOutput']:
        if str(obj).isdigit():
            click.echo(obj)
        else:
            click.secho('0', fg='yellow')
            click.secho('Warning: no values returned,'
                        ' assuming 0 or this flag is not supported.',
                        fg='yellow', err=True)
    else:
        logging.info('elm.out_fmt: %s', elm.out_fmt)
        outputformat(obj, elm.command, elm.plural_command, elm.zab_url, elm.out_fmt)

        if 'limit' in flags and len(obj) >= flags['limit']:
            click.secho('Warning: row limit matches records returned,'
                        ' there may be data you are not seeing.',
                        fg='yellow', err=True)


def outputformat(obj, command, plural_command, zab_url, outputformat='txt'):
    df = pd.DataFrame(obj)
    pd.set_option('display.max_columns', 0)
    pd.set_option('display.max_colwidth', 0)

    if not df.empty:
        #convert any columns with an subdict

        if ( 'html' in outputformat ) and ( command == 'hostgroup' or command == 'host' or command == 'template'):
            id = command + "id"
            df[id] = zab_url + "/" + plural_command + ".php?form=update&" + id + "=" + df[id]

        if outputformat == 'csv':
            click.echo(df.to_csv(index=False))
        elif outputformat == 'html':
            click.echo(htmlmin.minify(df.to_html(index=False, render_links=True, escape=False), remove_empty_space=True))
        elif outputformat == 'prettyhtml':
            colorful_html = highlight(df.to_html(index=False, render_links=True, escape=False), lexers.HtmlLexer(), formatters.TerminalFormatter())
            click.echo(colorful_html)
        elif outputformat == 'json':
            plain_json=json.dumps({plural_command: obj})
            click.echo(plain_json)
        elif outputformat == 'prettyjson':
            formatted_json=json.dumps({plural_command: obj}, sort_keys=True, indent=2)
            colorful_json = highlight(formatted_json, lexers.JsonLexer(), formatters.TerminalFormatter())
            click.echo(colorful_json.rstrip("\n")) # highlight adds an extra blank line on the end
        elif outputformat == 'latex':
            click.echo(df.to_latex(index=False))
        elif outputformat == 'sql':
            click.echo(df.to_sql(index=False))
        elif outputformat == 'raw':
            click.echo(obj)
        else:
            # default to txt
            click.echo(df.to_string(index=False,))
    else:
        click.secho('Warning: no data found', fg='yellow', err=True)

def export(export_filename, config_file, command, flags=""):
    '''export python query to file'''
    file_loader = FileSystemLoader('elm')
    env = Environment(loader=file_loader)
    template = env.get_template('save_query.py.j2')
    output = template.render(config_file=config_file, command=command, flags=flags)
    export_filename.write(output)
